/* Las reglas de css se ordenan en "cascada" */
/* Se pueden sobreescribir algunas reglas de diseño poniendolas por debajo */

/* lenguajecss.com */
/* curso css google */

/*
selector {
    propiedad : valor; --> declaracion
} 
*/


/* estila todos los h1 */
/* para la opacidad se usa rgb */
h1 {
    color :rgb(0 0 0 / 70%);
    /* Para colores tambien se usa el hsl u oklch */
    /* color : hsl(60 , 100% ,50%); */
    /* color :oklch(343 70% 44% / 50%); */

    /* Bordes */

    /* border-width: 10px;
    border-style: solid;
    border-color: red; */
}

body {
    background-color: rgb(224, 241, 255);
    /* Importante tener fallbacks es decir font-families secundarias que cargun si no carga la primera */
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}


/* clases como selector */
.link {
    color:red;
}

/* id como selectores */
/* No es buena practica estilar con ids porque no reutilizamos el css */
#show{
    background: #09f;
    color:white;
    border: 0;
}

.description{
    border: red solid;
}

/* Herencia */
/* Hay propiedades que son inherit por defecto como color*/
/* Otras como border no */
/* En MDN si buscamos la propiedad nos dice si se hereda o no */
strong {
    border : inherit;
}

/* pseudoclases */
/* En las DevTools del navegador tenemos una opcion para
simular los eventos y probar sus estilos */
/* :hover cuando se pase el raton por encima */
/* diferencia entre borde y contorno: */
.link:hover {
    border:3px solid #09f;
}
/* El outline no cambia el ancho del elemento el border si */
/* Se nota como el border mueve el elemento y el outline no */
.link-outline:hover{
    outline: 3px solid red;
}

/* :active se activa justo cuando le hacemos click */
.link:active{
    outline: 3px solid black
}

/* :first-child (o last-child) solo el primer hijo del selector */
/* Podemos poner un selector y otro separado por espacio para referirinos a los que esten dentro del otro */
/* Hay que tener cuidado porque como podemos ver se aplica dos veces la opacidad al segundo nivel de la lista */
ul li{
    opacity: 0.7;
}

li:last-child{
    color:purple;
}

/* Para seleccionar distintos elementos hay varios operadores: */
 /* Operador > :  */
 /* Se refiere a los hijos directos. Los que esten en un nivel mas bajo que el primero no */

 /* Operador ~ : */
/* Se refiere a los hermanos siguientes. NO a los anteriores */

/* Operador + :  */
/* Hermano inmediatamente despues */



/* Fallbacks */
/* Se ponen dos propiedades iguales con valores distintos */
/* por si uno no funciona tiene el otro  */
p{
    color:#09f;
    /* Si no funciona el oklch se usara el hexadecimal */
    color:oklch(40.1% 0.123 21.57);
}

/* Especificidad */
/* CSS le da prioridad a las declaraciones que esten dentro del selector mas especifico,
en el siguiente orden -> 
    1.- ID
    2.- Clases
    3.- Elementos o pseudoelementos
Si se empata en algun nivel superior se fija en el resto de selectores (p.e: p #text < .parrafo #text) */
/* Más especificico aún son estilos en linea es decir ponerselo como atributo al propio elemento html (poco usados o para cosas dinamicas)*/
/* Para saltarse la especificidad se puede saltar la palabra !important y usará el estilo de que tenga el !important (no se debe usar -> smell)*/


/* Unidades */
.img{
    /* Porcentajes  */
    /* Porcentaje relativo al contenido */
    /* Tenemos relativas al wiew-port: que es el area que vemos */
    /* El view-port toma la altura de lo que se ve p.e: 1000px pero si tiene margen u otra propiedad seguira siendo 1000px */
    /* Lo que hace que si tenemos margen y ponemos 100vh nos dara un scroll */
    height: 50vh; /* view-port-height */
    width:50vw; /*view-port-width */
}

/* Modelo de la caja */
/* Tenemos elementos por defecto que son display inline (en linea) */
/* Son normalmente texto como span, strong, em, pero NO otras como h1 o p */
/* No se les puede aplicar un width y heigth */
/* Aparecen en la misma linea uno detras de otro */

/* Tambien tenemos los bloques como div o section */
/* Que tiene un display block */
/* Y que funcionan como bloques, se ponen uno debajo de otro y */
/* si se le pueden aplicar estilos de width y height */

/* Margin, padding y border */
/* Margin es el margen que tiene el elemento con el resto */
/* El padding es la separacion entre el contenido y el container */
/* es decir que la caja aumenta de tamaño (p.e: si tiene un width:100px y un padding:0px 20px el contenedor */
/* en total ocupará 140px) */
/* El border tambien añade tamaño a la caja */
/* Y es el envoltorio del contenido (contenido + padding) */
/* border: 10px solid red; añadira 20px de tamaño al contenedor */
/* En las dev tools con el selector de elementos si nos ponemos encima del elemento nos dice el tamaño en total */

/* BOX-SIZING */
/* Este funcionamiento de ir añadiendo tamaño segun el padding y el margin se puede cambiar */
/* gracias a la propiedad box-sizing, la cual por defecto tiene como valor content-box,pero */
/* si le cambiamos el valor a border-box el width que le pondramos sera la suma del padding border y contenido */
/* por lo que el contenido se adaptará */

.img{
    border:10px solid red;
}


